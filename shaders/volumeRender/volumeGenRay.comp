// write me a base glsl compute shader
// that generates rays for volume rendering
#version 450
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout:enable
#include "../common.glsl"
#include "random.h"
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout(set = 0,binding = 0) uniform sampler3D volumeTexture; // 3D texture for volume data
layout(set = 0,binding = 1) uniform sampler3D gradientTexture; // 2D texture for depth information
layout(set = 0, binding = 2) uniform sampler1D diffuseLookupTexture;
layout(set = 0, binding = 3) uniform sampler1D specularLookupTexture;
layout(set = 0,binding = 4) uniform sampler1D roughnessLookupTexture; // 2D texture for roughness information
layout(set = 0,binding = 5) uniform sampler1D opacityLookupTexture; // 2D texture for normal information
layout(set = 0, binding = 6,scalar) uniform vUniform
{
    VolumeUniform volumeUniform;
};
layout(set = 0, binding = 7, rgba16f) uniform image2D diffuseRT;
layout(set = 0, binding = 8, rgba16f) uniform image2D specularRT;
layout(set = 0, binding = 9, rgba16f) uniform image2D normalRT; // 2D texture for normal information
layout(set = 0, binding = 10, r32f) uniform image2D depthRT; // 2D texture for normal information
struct VolumeDesc
{
    AABB  BoundingBox;
    float StepSize;
    float DensityScale;
};

struct ScatterEvent
{
    vec3  Position;
    vec3  Normal;
    vec3  Diffuse;
    vec3  Specular;
    float Roughness;
    bool  IsValid;
};

float GetIntensity(VolumeDesc desc, vec3 position)
{
    return texture(volumeTexture, GetNormalizedTexcoord(position, desc.BoundingBox)).r;
}

vec3 GetGradient(VolumeDesc desc, vec3 position)
{
    return texture(gradientTexture, GetNormalizedTexcoord(position, desc.BoundingBox)).rgb;
}

float GetOpacity(VolumeDesc desc, vec3 position)
{
    // return GetIntensity(desc, position);
    return texture(opacityLookupTexture, GetIntensity(desc, position)).r;
}

vec3 GetDiffuse(VolumeDesc desc, vec3 position)
{
    return texture(diffuseLookupTexture, GetIntensity(desc, position)).rgb;
}

vec3 GetSpecular(VolumeDesc desc, vec3 position)
{
    return texture(specularLookupTexture, GetIntensity(desc, position)).rgb;
}
float GetRoughness(VolumeDesc desc, vec3 position)
{
    return texture(roughnessLookupTexture, GetIntensity(desc, position)).r;
}

ScatterEvent RayMarching(VolumeRay ray, VolumeDesc desc, inout uint seed)
{
    ScatterEvent event;
    event.Position  = vec3(0.0f);
    event.Normal    = vec3(0.0f);
    event.Diffuse   = vec3(0.0f);
    event.Specular  = vec3(0.0f);
    event.Roughness = 0.0f;
    event.IsValid   = false;

    Intersection intersection = IntersectAABB(ray, desc.BoundingBox);
    if (intersection.Max < intersection.Min)
    {
        return event;
    }
    const float minT = max(intersection.Min, ray.Min);
    const float maxT = min(intersection.Max, ray.Max);

    const float threshold = -log(1.0 - rand(seed)) / desc.DensityScale;
    float       sum       = 0.0f;
    float       t         = minT + rand(seed) * desc.StepSize;
    vec3        position  = vec3(0.0f);
    while (sum < threshold)
    {
        position = ray.origin + t * ray.direction;
        if(t>maxT)
        {
            return event;
        }
        sum += desc.DensityScale*GetOpacity(desc,position)*desc.StepSize;
        t+= desc.StepSize;
    }
    vec3 gradient = GetGradient(desc, position);
    float factor = 1.0/sqrt(dot(gradient, gradient)+0.00001f);
    vec3 diffuse = GetDiffuse(desc, position);
    vec3 specular = GetSpecular(desc, position);
    float roughness = GetRoughness(desc, position);
    vec3 normal = dot(gradient,-ray.direction) > 0.0 ? gradient*factor : -gradient*factor;
    event.IsValid = true;
    event.Normal = normal;
    event.Position = position+0.01*normal;
    event.Diffuse = diffuse;
    event.Specular = specular;
    event.Roughness = roughness;
    return event;
}

void main()
{
    // Get the local work group ID
    ivec2 localID = ivec2(gl_GlobalInvocationID.xy);
    vec2 resolution = vec2(volumeUniform.RTDimensions);
    vec2 uv = localID/resolution;
    vec3 camSpaceUvPos = vec3(uv*2.0-1.0,1.0);
    vec3 direct = (volumeUniform.InvViewMatrix*normalize(volumeUniform.InvProjectMatrix*vec4(camSpaceUvPos,1.0))).xyz;
    vec4 origin = (volumeUniform.InvViewMatrix*vec4(vec3(0.0),1.0));
    VolumeRay ray;
    ray.origin = origin.xyz;
    ray.direction = normalize(direct);
    ray.Min = 0.0;
    ray.Max = 100.0;

    uint  seed        = xxhash32(uvec3(localID, volumeUniform.frameCount));

    VolumeDesc desc;
    desc.BoundingBox.Min = volumeUniform.BBoxMin;
    desc.BoundingBox.Max = volumeUniform.BBoxMax;
    desc.StepSize = volumeUniform.StepSize;
    desc.DensityScale = volumeUniform.Density;
    ScatterEvent event = RayMarching(ray, desc, seed);

    AABB aabb;
    aabb.Min = volumeUniform.BBoxMin;
    aabb.Max = volumeUniform.BBoxMax;
    Intersection intsect = IntersectAABB(ray, aabb);
    if(intsect.Max < intsect.Min)
    {
        event.IsValid = false;
    }else{
        imageStore(normalRT, localID, vec4(vec3(1.0,1.0,0.0), 1.0));
    }
    if(event.IsValid){
        vec3 normal = vec3(0.0);
        vec4 position = vec4(0.0);
        normal = event.Normal;
        position = volumeUniform.ProjectMatrix*volumeUniform.ViewMatrix*vec4(event.Position,1.0);
        position /= position.w;
        imageStore(diffuseRT, localID, vec4(event.Diffuse, 1.0));
        imageStore(specularRT, localID, vec4(event.Specular, 1.0));
        imageStore(normalRT, localID, vec4(event.Normal, event.Roughness));
        imageStore(depthRT, localID, vec4(position.z, 0.0, 0.0, 0.0));
    }
    else{
        vec4 position = volumeUniform.ProjectMatrix*volumeUniform.ViewMatrix*vec4(ray.origin,1.0);
        position /= position.w;
        imageStore(diffuseRT, localID, vec4(0.0, 0.0, 0.0, 1.0));
        imageStore(specularRT, localID, vec4(0.0, 0.0, 0.0, 1.0));
        imageStore(normalRT, localID, vec4(0.0, 0.0, 0.0, 1.0));
        imageStore(depthRT, localID, vec4(0.0, 0.0, 0.0, 0.0));
    }

}