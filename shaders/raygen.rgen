#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable // To be able to use #include
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_image_load_formatted : enable
#extension GL_ARB_gpu_shader_int64 : enable 
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_scalar_block_layout : enable 
#include "host_device.h"
layout(set = 0,binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0,binding = 1, rgba32f) uniform image2D RayTraceRT;
layout(set = 0,binding = 2,scalar)  buffer MaterialBuffer{
Material materials[];
};
layout(set = 0,binding = 3) uniform RenderUniformBlock{
    RenderUniform  renderUniform;
};

layout(set = 0,binding = 4,scalar) buffer LightMeshIdxBufferBlock{
    uint lightMeshIdx[];
};

layout(set = 0,binding = 5,scalar) buffer InstanceBuffer{
    Mesh meshes[];
};
layout(set = 0,binding = 6) uniform sampler2D[] sceneTextures;

void main(){
    vec2 pixel = vec2(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y);
    vec2 resolution = vec2(gl_LaunchSizeEXT.x, gl_LaunchSizeEXT.y);
    vec2 uv = (pixel + vec2(0.5)) / resolution;
    vec4 color = vec4(uv, 0.0, 1.0);
    imageStore(RayTraceRT, ivec2(pixel), color);
    Mesh test = meshes[1];
    Material mat = materials[test._materialIndex];
    imageStore(RayTraceRT, ivec2(pixel), vec4(uv,0.0,1.0));
}