#version 460
#extension GL_GOOGLE_include_directive : enable   // To be able to use #include
#extension GL_EXT_ray_tracing : require           // This is about ray tracing
#extension GL_KHR_shader_subgroup_basic : require // Special extensions to debug groups, warps, SM,
                                                  // ...
#extension GL_EXT_scalar_block_layout : enable    // Align structure layout to scalar
#extension GL_EXT_nonuniform_qualifier : enable   // To access unsized descriptor arrays
#extension GL_ARB_shader_clock : enable           // Using clockARB
#extension GL_EXT_shader_image_load_formatted : enable // The folowing extension allow to pass
                                                       // images as function parameters
#extension GL_EXT_scalar_block_layout : enable         // Usage of 'scalar' block layout

#extension GL_NV_shader_sm_builtins : require    // Debug - gl_WarpIDNV, gl_SMIDNV
#extension GL_ARB_gpu_shader_int64 : enable      // Debug - heatmap value
#extension GL_EXT_shader_realtime_clock : enable // Debug - heatmap timing

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable
#include "host_device.h"
#include "random.h"
#include "bsdf_functions.h"
layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0,binding = 1, rgba32f) uniform image2D RayTraceRT;
layout(set = 0,binding = 2,scalar)  buffer MaterialBuffer{
Material materials[];
};
layout(set = 0,binding = 3) uniform RenderUniformBlock{
    RenderUniform  renderUniform;
};

layout(set = 0,binding = 4,scalar) buffer LightMeshIdxBufferBlock{
    uint lightMeshIdx[];
};

layout(set = 0,binding = 5,scalar) buffer InstanceBuffer{
    Mesh meshes[];
};
layout(set = 0,binding = 6) uniform sampler2D[] sceneTextures;
layout(set = 0, binding = 7) uniform sampler2D envTextures;
layout(set = 0, binding = 8, scalar) buffer EnvAccelBuffer
{
    EnvAccel envAccels[];
};

layout(buffer_reference, scalar) buffer Vertices
{
    Vertex v[];
};
layout(buffer_reference, scalar) buffer Indices
{
    uvec3 i[];
};
#include "common.glsl"
layout(location = 0) rayPayloadEXT PlayLoad rtPload;
layout(location = 1) rayPayloadEXT ShadowPlayLoad shadowPload;
#include "pathtrace.glsl"
void main()
{
    ivec2 pixel       = ivec2(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y);
    vec2  resolution  = vec2(gl_LaunchSizeEXT.x, gl_LaunchSizeEXT.y);
    uint  seed        = xxhash32(uvec3(gl_LaunchIDEXT.xy, renderUniform.frameCount));
    vec2  pixelOffset = vec2(rand(seed) - 0.5, rand(seed) - 0.5);
    vec2  uv          = (pixel + vec2(0.5) + pixelOffset) / resolution;
    vec3  res         = vec3(0.0);
    int   maxSampleNum = 1;
    rtPload.seed       = seed;
    for (int simpl = 0; simpl < maxSampleNum; ++simpl)
    {
        res += traceRay(uv, resolution, 10);
    }
    res /= float(maxSampleNum);
    if (renderUniform.frameCount == 0)
    {
        imageStore(RayTraceRT, ivec2(pixel), vec4(res, 1.0));
        return;
    }
    else
    {
        vec3 old_color = imageLoad(RayTraceRT, pixel).xyz;
        vec3 new_color = mix(old_color, res, 1.0 / (float(renderUniform.frameCount)));
        imageStore(RayTraceRT, pixel, vec4(new_color, 1.0));
        return;
    }
}